@page "/"
@using CsvViewer.Contracts
@using KristofferStrube.Blazor.FileSystem
@inject IFileSystemAccessService FileSystemAccessService;
@inject Interactors Interactors;

<PageTitle>Home</PageTitle>

<MBCard AutoStyled="true">
	<Primary>
		<p>Choose a CSV file to display its contents.</p>
		<MBButton
			ButtonStyle="MBButtonStyle.ContainedRaised"
			Label="Choose..."
			@onclick="LoadCsvFile"/>
	</Primary>
</MBCard>

@if (csvPage is not null)
{
	<MBCard AutoStyled="true">
		<Primary>
			<MBDataTable
				class="table"
				Context="item"
				Items="@csvPage.Lines">
				<TableHeader>
					@foreach (var header in csvPage.Headers)
					{
						<th class="header-bold" role="columnheader" scope="col">
							@header
						</th>
					}
				</TableHeader>
				<TableRow>
					@foreach (var cell in item.Cells)
					{
						<td style="text-align: center">@cell</td>
					}
				</TableRow>
				<Paginator>
					<MBPaginator
						@bind-ItemsPerPage="@PageLength"
						@bind-PageNumber="@PageIndex"
						ItemsPerPageSelection="@itemsPerPageSelection"
						ItemCount="@csvPage.TotalLines"/>
				</Paginator>
			</MBDataTable>
		</Primary>
	</MBCard>
}

@code {
	readonly int[] itemsPerPageSelection = [5, 10, 20];

	CsvPage? csvPage;

	int pageLength = 10;
	int PageLength
	{
		get => pageLength;
		set
		{
			pageLength = value;
			csvPage = Interactors.LoadCsvPage(pageIndex, pageLength);
		}
	}

	int pageIndex;
	int PageIndex
	{
		get => pageIndex;
		set
		{
			pageIndex = value;
			csvPage = Interactors.LoadCsvPage(pageIndex, pageLength);
		}
	}

	async Task LoadCsvFile()
	{
		var fileHandle = await ChooseFile();
		csvPage = await Interactors.LoadCsvFile(fileHandle, pageLength);
	}

	private async Task<FileSystemFileHandle> ChooseFile()
	{
		var options = new OpenFilePickerOptionsStartInWellKnownDirectory {
				Multiple = false, StartIn = WellKnownDirectory.Downloads };
		var fileHandles = await FileSystemAccessService.ShowOpenFilePickerAsync(options);
		return fileHandles.Single();
	}
}